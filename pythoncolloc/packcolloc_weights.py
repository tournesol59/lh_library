      
#c     weights for error estimate
#       CNSTS1 /    .25D0,     .625D-1,  7.2169D-2, 1.8342D-2,
#     1     1.9065D-2, 5.8190D-2, 5.4658D-3, 5.3370D-3, 1.8890D-2,
#     2     2.7792D-2, 1.6095D-3, 1.4964D-3, 7.5938D-3, 5.7573D-3,
#     3     1.8342D-2, 4.673D-3,  4.150D-4,  1.919D-3,  1.468D-3,
#     4     6.371D-3,  4.610D-3,  1.342D-4,  1.138D-4,  4.889D-4,
#     5     4.177D-4,  1.374D-3,  1.654D-3,  2.863D-3  /
#      DATA CNSTS2 /   1.25D-1,   2.604D-3,  8.019D-3,  2.170D-5,
#     1     7.453D-5,  5.208D-4,  9.689D-8,  3.689D-7,  3.100D-6,
#     2     2.451D-5,  2.691D-10, 1.120D-9,  1.076D-8,  9.405D-8,
#     3     1.033D-6,  5.097D-13, 2.290D-12, 2.446D-11, 2.331D-10,
#     4     2.936D-9,  3.593D-8,  7.001D-16, 3.363D-15, 3.921D-14,
#     5     4.028D-13, 5.646D-12, 7.531D-11, 1.129D-9  /

# calculus
#           WGTMSH(I) = 1.D1 * CNSTS2(KOFF+LTOLI-MTOT) / TOLIN(I)
#           ROOT(I) = 1.D0 / DFLOAT(K+MTOT-LTOLI+1)
#


import numpy as num

tolin = 1.E-6
ConstW2 = num.zeros((1,28))

ConstW2 = [ 1.25D-1,   2.604D-3,  8.019D-3,  2.170D-5, 
              7.453D-5,  5.208D-4,  9.689D-8,  3.689D-7,  3.100D-6,
              2.451D-5,  2.691D-10, 1.120D-9,  1.076D-8,  9.405D-8,
              1.033D-6,  5.097D-13, 2.290D-12, 2.446D-11, 2.331D-10,
              2.936D-9,  3.593D-8,  7.001D-16, 3.363D-15, 3.921D-14,
              4.028D-13, 5.646D-12, 7.531D-11, 1.129D-9 ]

Weight = 1.0*ConstW2(koff+ltoli-mtot) / tolin(I)
Root = 1.0 / float(k+mtot-ltoti+1)
